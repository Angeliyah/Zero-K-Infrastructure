@using ZeroKWeb
@using System.Globalization
@model ZeroKWeb.Controllers.ChartsController.ChartsModel

@{
    Page.Title = "Rating charts";
}
<script src="/Scripts/moment.min.js"></script>
<script src="/Scripts/Chart.min.js"></script>

<div class="fleft" style="padding: 5px;">
    <h2>Zero-K Player Rating History</h2> <br/>
    <form action="@Url.Action("Ratings")">
        <table>
            <tr>
                <td>Rating:</td>
                <td>@Html.EnumDropDownListFor(x => x.RatingCategory, new { @class = "width-100"})</td>
            </tr>
            <tr>
                <td>Players: </td>
                <td>@Html.TextBox("User", "", new { data_autocomplete = Url.Action("Users", "Autocomplete"), data_autocomplete_action = "add" })</td>
            </tr>
            <tr>
                <td></td>
                <td>
                    <div id="players">
                    </div>
                </td>
            </tr>
            <tr><td>From</td><td>@Html.TextBoxFor(x => x.From, new { @class = "js_datepicker" })</td></tr>
            <tr><td>To</td><td>@Html.TextBoxFor(x => x.To, new { @class = "js_datepicker" })</td></tr>
            <tr><td colspan="2"><input class="textbutton width-100" type="submit" value="Plot graph" /></td></tr>
        </table>
    </form>
    @{
        if (Model.GraphingData != null && Model.GraphingData.Count > 0)
        {
            <canvas id="graphID"></canvas>
            <script language="javascript">

                var ctx = document.getElementById('graphID').getContext('2d');
                Chart.defaults.global.defaultFontColor = '#ddd';
                Chart.defaults.global.defaultColor = 'rgba(255, 255, 255, 0.1)';
                var chart = new Chart(ctx, {
                    // The type of chart we want to create
                    type: 'line',

                    // The data for our dataset
                    data: {
                        //labels: [@Html.Raw(string.Join(",", Model.GraphingData[0].Data.Select(x => "\"" + x.Day.ToString("yyyy-MM-dd") + "\"").ToList()))],
                        datasets: [
                            @{int index = 0;}
                            @foreach (var series in Model.GraphingData)
                            {
                                @:{
                                    @:label: "@series.Title",
                                    @:backgroundColor: '#@Model.Colors[(index) % Model.Colors.Length]',
                                    @:borderColor: '#@Model.Colors[(index++) % Model.Colors.Length]',
                                    @:fill: false,
                                    @:data: [@Html.Raw(string.Join(",", series.Data.Select(x => "{x: moment(\"" + x.Day.ToString("yyyy-MM-dd") + "\"), y: "+ x.Value.ToString(CultureInfo.InvariantCulture) + "}").ToList()))],
                                    @:
                                }
                            }
                        ]
                    },

                    // Configuration options go here
                    options: {
                        scales: {
                            yAxes: [{
                                gridLines: {
                                    color: 'rgba(255, 255, 255, 0.2)',
                                    zeroLineColor: 'rgba(255, 255, 255, 0.5)',
                                },
                            }],
                            xAxes: [{
                                type: "time",
                                gridLines: {
                                    color: 'rgba(255, 255, 255, 0.2)',
                                    zeroLineColor: 'rgba(255, 255, 255, 0.2)',
                                }
                            }],
                        },
                        responsive: true,
                    },

                });
            </script>
    }
    }
</div>
<br class="clearfloat" />